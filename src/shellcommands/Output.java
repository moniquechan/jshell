package shellcommands;

import filesystem.Dir;
import test.FileSystemI;

/**This is a printing class.
 * Helps to determine if to print to console or to files.*/
public class Output {
  
  private String stored = "";   // Output generated by a command
  private int place = 0;

  /**Print the output of the command to either standard output or a file, given the appropriate flags ">" or ">>".
   * @param contents The data to print/store.
   * @param currDir The current working directory.
   * @param file The name of the file to output to, if applicable.
   * @param root Pointer to the FileSystem instance.
   * */
  public void printString(String contents, Dir currDir, String file, FileSystemI root) {
    if(place == -1) {
      Overwrite.executeCommand(currDir, file, contents, root);
    }
    else if (place == 1) {
      Append.executeCommand(currDir, file, contents, root);
    }
    else {
      System.out.println(contents);
    }
  }
  
  /**Print the data stored to appropriate place.
   * @param currDir The current working directory.
   * @param file The file to output the data to, if applicable.
   * @param root An instance of the FileSystem object.
   * */
  public void printStored(Dir currDir, String file, FileSystemI root) {
    if(place == -1) {
      if(stored.endsWith("\n")) {
        stored = stored.substring(0, stored.length() - 1 );
      }
      Overwrite.executeCommand(currDir, file, stored, root);
    }
    else if (place == 1) {
      if(stored.endsWith("\n")) {
        stored = stored.substring(0, stored.length() - 1 );
      }
      Append.executeCommand(currDir, file, stored, root);
    }
    else {
      System.out.print(stored);
    }
  }
  
  /**Setter method; tells us where to print the output of a command to (standard output, file, etc.)
   * @param num Integer determining where to print. (-1) => Overwrite; (1) => Append; (0) => Standard Output
   * */
  public void setPlaceToPrint(int num) {
    this.place = num;
  }
  
  /**Retrieve the location that the output will be printed to.
   * @return The place to print. (-1) => Overwrite file; (1) => Append to a file; (0) => Standard Output
   * */
  public int getPlaceToPrint() {
    return this.place;
  }
  
  /**Store additional output from a command.
   * @param tostore The new data to append to the output.
   * */
  public void storeString(String tostore) {
    this.stored = stored + tostore;
  }
}
